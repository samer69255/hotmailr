#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('fbx2:server');
var http = require('http');
var Cookie = require('cookie');
var fs = require('fs');

var request = require('request');

var unescapeJs = require("unescape-js");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
var interval = null;
var io = require('socket.io')(server);
var runner = '';
reset();
io.on('connection', (socket) => {
    console.log('connected');
    var cookies = Cookie.parse(socket.handshake.headers.cookie);
    var user = cookies.user;
    
    if (stat != 'stop' && runner == user) {
        if (stat == 'compile') var emails = fs.readFileSync('./users/'+name+'.txt', 'UTF-8').split('\n'); else var emails = ems;
        socket.emit('run', {Ems:emails, stat:stat}); 
    }
    if (runner !== '' && runner !== user) soket.emit('block');
    socket.on('rest', () => {
        reset();
    })
    socket.on('start', async (emails) => {
        console.log(emails);
        reset();
        runner = user;
//        interval = setInterval(() => {
//            request.get('https://htchkrn.herokuapp.com/', new Function())
//        },10 * 60 * 1000);
        stat = 'working';
        socket.emit('run', {stat:stat});
        socket.emit('status', 'working');
        su.len = emails.length;
        status(socket,'تهيئة هوتميل');
        await InitH();
        status(socket,'تهيئة ياهو');
        await InitY();
        for (var i in emails) {
            var email = emails[i];
            status(socket,email);
            var host = email.match(/@([a-zA-Z]+)\./)[1];
            console.log(host);
            if (i > 0)
            await time(1000);
            if (host == 'hotmail')
            var ch = await ckeckH(email);
            else var ch = await checkY(email);
            console.log(email + ' => '+ ch);
            if (ch == 'error')
            {
                await(2000);
                try {
                    await Init();
                } catch (e) {
                    throw e;
            }
                i = i - 1;
                continue;
            }
            
            if (ch == true) {
                ems.push(email);
                su.t++;
                socket.emit('add', email);
        }
         else if (ch == false) {  su.f++; }
         else su.u++;
        }
        stat = 'compile';
        
             name = 'user_'+(new Date).getTime().toFixed(0);
            fs.writeFile('./users/'+name+'.txt', ems.join('\n'), function (e) {
                ems = [];
                if (e) throw e;
            });
            name = name;
        
        socket.emit('copm', {t:su.t, f:su.f, u:su.u, len:su.len});
    });
    
});


//(async function () {
//    await InitY();
//    console.log(await checkY('samer04054959@yahoo.com'));
//})();
// functions
function reset() {
      
         cookie={hotmail:"", yahoo:""};
           ss= {};
           yy = {};
           su= {ems:[], u:0, f:0, t:0, len:0, stat:'stop'};
           stat= "stop";
           ems= [];
           runner = '';
         if (interval != null) clearInterval(interval);
}

function InitH() {
    return new Promise(resolve => {
        
        
        request.get('https://signup.live.com/?lic=1', (err, response, body) => {
            if (err) {
                console.log('initing ...');
                return Init();  };
            console.log('working');
    var uaid = body.match(/"uaid":"(.*?)"/)[1],
        uiflvr = body.match(/"uiflvr":(\d+)/)[1],
        scid = body.match(/"scid":(\d+)/)[1],
        hpgid = body.match(/"hpgid":(\d+)/)[1],
        canary = (body.match(/"apiCanary":"(.*?)"/)[1]);
    
    ss = {
        uaid:uaid,
        uiflvr:uiflvr,
        scid:scid,
        hpgid:hpgid,
        canary:unescapeJs(canary)
    }
    
    var Cookies = response.headers['set-cookie'];
    Cookies.forEach(key => {
        var cc = key.split(' ')[0];
        cookie.hotmail += " " + cc;
    });
     cookie.hotmail =  cookie.hotmail.trim();
    //console.log(cookie);
    resolve();
        });
        

    });

}

function ckeckH(email) {
    
    return new Promise(resolve => {
          var data = {signInName: email,uaid: ss.uaid,includeSuggestions:true,uiflvr: ss.uiflvr,scid: ss.scid,hpgid: ss.hpgid}
   // console.log(data);
    var options = {
    url:'https://signup.live.com/API/CheckAvailableSigninNames?lic=1',
    json:(data),
    headers:{
        'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8',
        'Cookie': cookie.hotmail,
        'canary': ss.canary
}
}
    
    request.post(options, (err, response, body) => {
        if (err) {
            
            return resolve('int');
        }
        if (response.statusCode != '200') return resolve('error');
        if (body.apiCanary)
      ss.canary = body.apiCanary;
      resolve(body.isAvailable);
      //console.log(body);
    });
     
    });
  
}

function InitY() {
    return new Promise(resolve => {
        request.get('https://login.yahoo.com/account/create', (err, response, body) => {
            var crumb = body.match(/<input type="hidden" value="(.*?)" name="crumb">/)[1];
            var acrumb = body.match(/<input type="hidden" value="(.*?)" name="acrumb">/)[1];
            yy.crumb = crumb;
            yy.acrumb = acrumb;
            
            var Cookies = response.headers['set-cookie'];
    Cookies.forEach(key => {
        var cc = key.split(' ')[0];
        cookie.yahoo += " " + cc;
    });
     cookie.yahoo =  cookie.yahoo.trim();
           // console.log(cookie.yahoo);
            resolve();
        });
    });
}

function checkY(email) {
    
    return new Promise(resolve => {
         var data = {
        specId:'yidReg',
        cacheStored:true,
        crumb:yy.crumb,
        acrumb:yy.acrumb,
        sessionIndex:'',
        done:'https://www.yahoo.com',
        googleIdToken:'',
        authCode:'',
        tos0:'oath_freereg|xa|en-JO',
        firstName:'',
        lastName:'',
        yid:email.split('@')[0],
        password:'',
        shortCountryCode:'AF',
        phone:'',
        mm:'',
        dd:'',
        yyyy:'',
        freeformGender:''
    }
    data = dataText(data);
    var options = {
    url:'https://login.yahoo.com/account/module/create?validateField=yid',
    body:(data),
    headers:{
        'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8',
        'Cookie': cookie.yahoo,
        'Accept-Encoding':'gzip, deflate, br',
        'Connection':'keep-alive',
        'Cache-Control':'no-cache',
        'Accept-Language':'ar-IQ',
        'Accept':'*/*',
        'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36 Edge/18.17763',
        'Origin':'https://login.yahoo.com',
        'Referer':'https://login.yahoo.com/',
        'X-Requested-With': 'XMLHttpRequest',
}
}
    request.post(options, (err, response, body) => {
        if (err) throw err;
        body = JSON.parse(body);
       console.log(body.errors);
        var isAvis = true;
        if (body.errors) {
            for (var o in body.errors) {
                var ob = body.errors[o];
                if (ob.name == 'yid') { isAvis = false; break;   }
            }
            resolve(isAvis);
        }
        else resolve(undefined);
        
        
    });
    });
   
}

async function time(dd) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        },dd);
    });
}

function dataText(data) {
    var txt = "";
    for (var i in data) {
        if (i != Object.keys(data)[0]) txt += "&"
        txt += i + "=" + data[i];
    }
    
    return txt;
}

function status(socket,text) {
     socket.emit('status', stat = text);
}

